<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chapters Viewer & PDF Converter</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #121212;
      color: #ffffff;
      text-align: center;
    }
    .container {
      display: flex;
      flex-direction: column;
      align-items: center;
      width: 100%;
    }
    img {
      max-width: 100%;
      height: auto;
      margin-bottom: 5px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.8);
    }
    h1 {
      margin: 20px;
      font-size: 24px;
      color: #f5f5f5;
    }
    h2.chapter-title {
      margin: 30px 0 15px;
      font-size: 20px;
      color: #ffcc00;
    }
    input, button {
      margin: 8px;
      padding: 10px;
      font-size: 16px;
      border-radius: 5px;
      border: none;
    }
    input {
      width: 80%;
      max-width: 400px;
    }
    button {
      background: #ff4081;
      color: white;
      cursor: pointer;
    }
    button:hover {
      background: #e91e63;
    }
    .chapter-form {
      margin-bottom: 15px;
    }
    #status {
      margin-top: 10px;
      color: #00e676;
    }
  </style>
</head>
<body>
  <h1>Chapters Viewer</h1>
  <div class="chapter-form">
    <input type="text" id="baseUrl" placeholder="Base URL (link of the image)" required><br>
    <input type="number" id="startPage" placeholder="Start Page (default 1)" value="1"><br>
    <input type="number" id="endPage" placeholder="End Page (e.g., 50)" required><br>
    <button onclick="loadChapter()">Load Chapter</button>
  </div>
  <button onclick="downloadPDF()">Download All as PDF</button>

  <p id="status"></p>
  <div class="container" id="imageContainer">
    <h2>Enter details and click 'Load Chapter'</h2>
  </div>

  <script>
    let imageElements = [];
    let chapterCounter = 0;

    async function loadChapter() {
      const container = document.getElementById('imageContainer');
      let baseUrl = document.getElementById('baseUrl').value.trim();

      if (!baseUrl.endsWith("/")) baseUrl += "/";

      const startPage = parseInt(document.getElementById('startPage').value) || 1;
      const endPage = parseInt(document.getElementById('endPage').value);
      const formats = ["jpg", "jpeg", "png", "webp"];

      if (!baseUrl || isNaN(endPage) || endPage < startPage) {
        alert("Please enter a valid Base URL and Page Range.");
        return;
      }

      chapterCounter++;
      let chapterName = `Chapter ${chapterCounter}`;
      let heading = document.createElement("h2");
      heading.className = "chapter-title";
      heading.textContent = chapterName;
      container.appendChild(heading);

      for (let page = startPage; page <= endPage; page++) {
        let img = document.createElement('img');
        img.alt = `${chapterName} - Page ${page}`;
        let loaded = false;

        // Try different zero paddings
        let pageNumbers = [
          String(page),                     // 1
          page.toString().padStart(2, "0"), // 01
          page.toString().padStart(3, "0"), // 001
          page.toString().padStart(4, "0")  // 0001
        ];

        for (let num of pageNumbers) {
          for (let format of formats) {
            let testSrc = `${baseUrl}${num}.${format}`;
            if (await checkImageExists(testSrc)) {
              img.src = testSrc;
              container.appendChild(img);
              imageElements.push({ chapter: chapterName, src: testSrc });
              loaded = true;
              break;
            }
          }
          if (loaded) break;
        }
      }
    }

    function checkImageExists(url) {
      return new Promise((resolve) => {
        let img = new Image();
        img.src = url;
        img.onload = () => resolve(true);
        img.onerror = () => resolve(false);
      });
    }

    async function downloadPDF() {
      if (imageElements.length === 0) {
        alert("No chapters loaded. Please load at least one.");
        return;
      }

      const status = document.getElementById('status');
      status.textContent = "Generating PDF...";

      const { jsPDF } = window.jspdf;
      let pdf = new jsPDF('p', 'mm', 'a4');
      let pageWidth = 210;
      let pageHeight = 297;

      let currentChapter = "";
      for (let i = 0; i < imageElements.length; i++) {
        let { chapter, src } = imageElements[i];

        if (chapter !== currentChapter) {
          if (i > 0) pdf.addPage();
          pdf.setFontSize(20);
          pdf.text(chapter, 10, 20);
          currentChapter = chapter;
          pdf.addPage();
        }

        let img = await loadImage(src);
        let ratio = img.width / img.height;
        let imgWidth = pageWidth;
        let imgHeight = imgWidth / ratio;

        if (imgHeight > pageHeight) {
          imgHeight = pageHeight;
          imgWidth = imgHeight * ratio;
        }

        let x = (pageWidth - imgWidth) / 2;
        let y = (pageHeight - imgHeight) / 2;

        pdf.addImage(img, 'JPEG', x, y, imgWidth, imgHeight);

        if (i < imageElements.length - 1) pdf.addPage();

        status.textContent = `Processing ${i + 1} of ${imageElements.length} pages...`;
      }

      pdf.save("Chapters.pdf");
      status.textContent = "PDF Downloaded!";
    }

    function loadImage(url) {
      return new Promise((resolve) => {
        let img = new Image();
        img.crossOrigin = "Anonymous";
        img.onload = () => resolve(img);
        img.src = url;
      });
    }
  </script>
</body>
</html>
